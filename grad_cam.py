# -*- coding: utf-8 -*-
"""grad_cam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a9ZpDxPUCLgeKpUO2qW8Tc45gyXEaz74
"""

import tensorflow as tf
import numpy as np
import cv2

def generate_gradcam(model, img_tensor, img_rgb, last_conv_layer_name):
    grad_model = tf.keras.models.Model(
        [model.inputs],
        [model.get_layer(last_conv_layer_name).output, model.output]
    )

    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(img_tensor)
        class_idx = tf.argmax(predictions[0])
        loss = predictions[:, class_idx]

    grads = tape.gradient(loss, conv_outputs)[0]
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1))
    heatmap = tf.reduce_sum(tf.multiply(pooled_grads, conv_outputs[0]), axis=-1)
    heatmap = np.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
    heatmap = heatmap.numpy()

    heatmap_resized = cv2.resize(heatmap, (224, 224))
    heatmap_colored = cv2.applyColorMap(np.uint8(255 * heatmap_resized), cv2.COLORMAP_JET)
    superimposed_img = cv2.addWeighted(img_rgb, 0.6, heatmap_colored, 0.4, 0)

    confidence = float(predictions[0][class_idx]) * 100
    return int(class_idx), confidence, superimposed_img, predictions